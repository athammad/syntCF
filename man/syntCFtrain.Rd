% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/syntCFtrain.R
\name{syntCFtrain}
\alias{syntCFtrain}
\title{Train Quantile Random Forests with Time Series Data using Caret and TimeSlice}
\usage{
syntCFtrain(
  frm,
  data = NULL,
  models = rangerTS,
  p.var = NULL,
  Dates = NULL,
  p.start = NULL,
  p.end = NULL,
  testingPeriod = NULL,
  tuneLength = NULL,
  windowsCV = NULL,
  seedVal = 123,
  fixedWindow = FALSE,
  skip = 0,
  verboseIter = TRUE,
  allowParallel = TRUE,
  ...
)
}
\arguments{
\item{frm}{The formula, e.g. (y~x1+x2).}

\item{data}{The full dataset.}

\item{models}{Model passed to Caret. By default RangerTS.}

\item{p.var}{vector of zeros and ones indicating the policy.}

\item{Dates}{vector of dates for the whole dataset.}

\item{p.start}{A vector specifying the first time point or date of the policy.}

\item{p.end}{A vector specifying the last time point or date of the policy.}

\item{testingPeriod}{Length of testing period. By default is 365.}

\item{tuneLength}{An integer denoting the amount of granularity in the tuning parameter grid. See caret::train() for more details.}

\item{windowsCV}{The initial number of consecutive values in each training set sample. See caret::createTimeSlices() for more details.}

\item{seedVal}{Seed value for reproducibility.}

\item{fixedWindow}{logical, if FALSE, all training samples start at 1.}

\item{skip}{integer, how many (if any) resamples to skip to thin the total amount}

\item{verboseIter}{A logical for printing a training log.}

\item{allowParallel}{if a parallel backend is loaded and available, should the function use it?}

\item{...}{Other arguments to be passed to caret.}
}
\value{
an object of class syntCF
}
\description{
Main function of the library syntCF. A convinient wrapper around `caret` with a custom model based on `rangerts` to take time dependency of the data into account trough block bootstrapping.
Cross-Validation is based on data partitioning using a fixed or growing window. To account to uncertainty in the predicted counterfactual time series, the library uses quantile regression forests.
}
\examples{
\dontrun{
set.seed(1)
tsn=365*10
x1 <- as.numeric(tsn + arima.sim(model = list(ar = 0.999), n = tsn))
y <- as.numeric(1.2 * x1 + rnorm(tsn))
#add effect of + 30 during what we will define as the tretament period
y[(365*9):(365*10)] <- y[(365*9):(365*10)] + 30
Dates <- seq.Date(as.Date("2014-01-01"), by = 1, length.out = tsn)
data <-cbind.data.frame(Dates,y, x1)
setDT(data)
data[Dates\%between\%c("2014-01-01", "2022-12-28"),treatment:=0]
data[Dates\%between\%c("2022-12-29", "2023-12-29"),treatment:=1]

trainModel<-syntCFtrain(frm = y~x1,
                       data=data,
                       p.var=data$treatment,
                       Dates=data$Dates,
                       p.start="2022-12-29",
                       p.end="2023-12-29",
                       testingPeriod=365,
                       tuneLength=1,
                       windowsCV=NULL)
}
}
